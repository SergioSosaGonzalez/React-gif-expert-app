{"version":3,"sources":["component/AddCategory.js","helpers/getGif.js","component/GifGridItem.js","component/GifGrid.js","hooks/useFetchGifs.js","component/GifExpertApp/index.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","console","error","type","value","required","onChange","currentTarget","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","image","key","GifExpertApp","categories","item","ReactDOM","render","document","getElementById"],"mappings":"6MA+BeA,EA7BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACLC,mBAAS,IADJ,mBAClCC,EADkC,KACtBC,EADsB,KAazC,OACE,0BAAMC,SAZa,SAACC,GACpBA,EAAEC,iBACF,IACMJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,KAEhB,MAAOE,GACPK,QAAQC,MAAMN,MAKd,2BACEO,KAAK,OACLC,MAAOX,EACPY,UAAQ,EACRC,SAAU,SAACV,GAAD,OAAOF,EAAcE,EAAEW,cAAcH,Y,uBCrB1CI,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UACpDH,GAFmB,+DAIFI,MAAMF,GAJJ,cAIfG,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVjB,kBAadM,GAbc,4CAAH,sDCaLO,EAXK,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAC5B,OACE,yBAAKc,UAAU,8CACb,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BACE,gCAASA,MCcFO,EAjBC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFN,SAACA,GAAc,IAAD,EACdjB,mBAAS,CACjCwB,KAAM,GACNa,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KASxC,OAHAC,qBAAU,WACRxB,EAAQC,GAAUwB,MAAK,SAACC,GAAD,OAAUH,EAAS,CAAEf,KAAMkB,EAAML,SAAS,SAChE,CAACpB,IACGqB,EDN2BK,CAAa1B,GAAjCa,EADkB,EACxBN,KAAca,EADU,EACVA,QAEtB,OACE,oCACE,4BAAKpB,GACJoB,GACC,uBAAGJ,UAAU,oCAAb,gBAEF,yBAAKA,UAAU,mDACZH,EAAOJ,KAAI,SAACkB,GAAD,OACV,kBAAC,EAAD,eAAaC,IAAKD,EAAMhB,IAAQgB,UEI3BE,EAhBM,WAAO,IAAD,EACW9C,mBAAS,CAAC,cADrB,mBAClB+C,EADkB,KACNhD,EADM,KAGzB,OACE,oCACE,+CACA,6BACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,4BACGgD,EAAWrB,KAAI,SAACsB,GAAD,OACd,kBAAC,EAAD,CAASH,IAAKG,EAAM/B,SAAU+B,UCRxCC,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,U","file":"static/js/main.ff025b3a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropType from \"prop-types\";\nconst AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    try {\n      if (inputValue.trim().length > 2) {\n        setCategories((cats) => [inputValue, ...cats]);\n        setInputValue(\"\");\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        value={inputValue}\n        required\n        onChange={(e) => setInputValue(e.currentTarget.value)}\n      />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropType.func.isRequired,\n};\n\nexport default AddCategory;\n","export const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&limit=10&api_key=Ao8rpJe7wbW7DHJ6J1ELuo2scBEpHWkW`;\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n  const gifs = data.map((img) => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url,\n    };\n  });\n  return gifs;\n};\n","import React from \"react\";\n\nconst GifGridItem = ({ title, url }) => {\n  return (\n    <div className=\"card animate__animated animate__backInLeft\">\n      <img src={url} alt={title} />\n      <p>\n        <strong>{title}</strong>\n      </p>\n    </div>\n  );\n};\n\nexport default GifGridItem;\n","import React from \"react\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport GifGridItem from \"./GifGridItem\";\n\nconst GifGrid = ({ category }) => {\n  const { data: images, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3>{category}</h3>\n      {loading && (\n        <p className=\"animate__animated animate__flash\">Cargando... </p>\n      )}\n      <div className=\"card-grid animate__animated animate__backInLeft\">\n        {images.map((image) => (\n          <GifGridItem key={image.id} {...image} />\n        ))}\n      </div>\n    </>\n  );\n};\nexport default GifGrid;\n","import { useState, useEffect } from \"react\";\nimport { getGifs } from \"../helpers/getGif\";\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then((imgs) => setState({ data: imgs, loading: false }));\n  }, [category]);\n  return state;\n};\n","import React, { useState } from \"react\";\nimport AddCategory from \"../AddCategory\";\nimport GifGrid from \"../GifGrid\";\nconst GifExpertApp = () => {\n  const [categories, setCategories] = useState([\"One Punch\"]);\n\n  return (\n    <>\n      <h2>Gift Expert app</h2>\n      <hr />\n      <AddCategory setCategories={setCategories} />\n      <ol>\n        {categories.map((item) => (\n          <GifGrid key={item} category={item} />\n        ))}\n      </ol>\n    </>\n  );\n};\nexport default GifExpertApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport GifExpertApp from \"./component/GifExpertApp\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}